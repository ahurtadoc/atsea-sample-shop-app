name: Deploy in AWS ec2

on:
  workflow_run:
    workflows: [Push Docker Images CI]
    types: [completed]
  

jobs:
  on-succes:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Get tags
        id: var
        run: echo "::set-output name=tag::$(git rev-parse --short HEAD)"
      - name: Check outputs
        run: echo ${{ steps.var.outputs.tag }}
      - name: Configure AWS Credentisals
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Check instance running
        run: |
              if [[ $(aws ec2 describe-instances --instance-ids ${{secrets.EC2_INSTANCE}} --query 'Reservations[].Instances[].State[].Name' --output text) = "stopped" ]] ; then 
                aws ec2 start-instances --instance-ids ${{secrets.EC2_INSTANCE}} ; 
              fi
      - name: Copy docker compose file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          source: "./docker-compose-prod.yml"
          target: "/home/${{ secrets.EC2_USERNAME }}"
      - name: Deploy docker stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          timeout: 60s
          script: |
            export TAG=${{ steps.vars.outputs.tag }}
            docker swarm init
            echo "${{ secrets.REVPROX_CERT }}" | docker secret create revprox_cert -
            echo "${{ secrets.REVPROX_KEY }}" | docker secret create revprox_key -
            echo "${{ secrets.POSTGRES_PASSWORD }}" | docker secret create postgres_password -
            echo "${{ secrets.PAYMENT_TOKEN }}" | docker secret create payment_token -
            docker stack deploy --compose-file docker-compose-pdn.yml atsea-pdn
  on-failure:
      runs-on: ubuntu-latest
      if: ${{ github.event.workflow_run.conclusion == 'failure' }}
      steps:
        - name: Alert fail artifact push
          run: echo "Fail to push artifact in docker hub"